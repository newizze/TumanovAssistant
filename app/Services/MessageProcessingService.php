<?php

declare(strict_types=1);

namespace App\Services;

use App\DTOs\OpenAI\ResponseRequestDto;
use App\Models\User;
use App\Tools\AddRowToSheetsToolDefinition;
use App\Tools\AddRowToSheetsToolHandler;
use Illuminate\Support\Facades\Log;

class MessageProcessingService
{
    public function __construct(
        private readonly OpenAIResponseService $openAIService,
        private readonly PromptService $promptService,
        private readonly AddRowToSheetsToolHandler $toolHandler,
        private readonly ExecutorService $executorService
    ) {}

    public function processMessage(string $messageText, User $user, array $fileLinks = []): string
    {
        try {
            Log::info('Processing message with AI', [
                'user_id' => $user->id,
                'message_length' => strlen($messageText),
                'file_links_count' => count($fileLinks),
            ]);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            $fileInfo = '';
            if ($fileLinks !== []) {
                $fileInfo = "\n\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (".count($fileLinks)." —à—Ç.):\n";
                foreach ($fileLinks as $index => $fileLink) {
                    $fileInfo .= '–§–∞–π–ª '.($index + 1).': '.$fileLink."\n";
                }
                $fileInfo .= "\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —ç—Ç–∏ —Å—Å—ã–ª–∫–∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã file_link_1, file_link_2, file_link_3 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!";
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–∑ Google Sheets
            $executors = $this->executorService->getApprovedExecutors();
            $executorsList = '';
            foreach ($executors as $executor) {
                $executorsList .= "‚Ä¢ –ö–æ–¥: {$executor['short_code']} | –§–ò–û: {$executor['full_name']}";
                if ($executor['position']) {
                    $executorsList .= " | –î–æ–ª–∂–Ω–æ—Å—Ç—å: {$executor['position']}";
                }
                if ($executor['tg_username']) {
                    $executorsList .= " | Telegram: {$executor['tg_username']}";
                }
                $executorsList .= "\n";
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            $toolDefinition = json_encode(AddRowToSheetsToolDefinition::getDefinition(), JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ XML —Ñ–∞–π–ª–∞
            $systemPrompt = $this->promptService->loadPrompt('task_creation', [
                'current_date' => now()->format('Y-m-d'),
                'user_timezone' => 'Europe/Moscow',
                'user_message' => $messageText.$fileInfo,
                'executors_list' => trim($executorsList),
                'telegram_username' => $user->username ?: 'unknown',
                'tool_definition' => $toolDefinition,
            ]);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (–≤–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã)
            $fullMessage = $messageText.$fileInfo;
            $requestDto = new ResponseRequestDto(
                model: 'gpt-4.1',
                input: $fullMessage,
                instructions: $systemPrompt,
                tools: [AddRowToSheetsToolDefinition::getDefinition()],
            );

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            $finalResponse = $this->processWithToolCalls($requestDto, $user);

            Log::info('Message processed successfully', [
                'user_id' => $user->id,
                'response_length' => strlen($finalResponse),
            ]);

            return $finalResponse;

        } catch (\Throwable $e) {
            Log::error('Failed to process message', [
                'user_id' => $user->id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);

            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {$e->getMessage()}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        }
    }

    private function handleAIResponse($response, User $user): string
    {
        $content = $response->getContent();
        $toolCalls = $response->getFunctionCalls();

        Log::info('Processing AI response', [
            'has_content' => ! empty($content),
            'tool_calls_count' => count($toolCalls),
            'tool_calls_structure' => $toolCalls,
        ]);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –∏ –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        if (! empty($toolCalls)) {
            $toolResults = [];

            foreach ($toolCalls as $toolCall) {
                Log::info('Processing tool call', [
                    'tool_call_structure' => $toolCall,
                ]);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
                if ($toolCall['type'] === 'function_call' &&
                    isset($toolCall['function']) &&
                    $toolCall['function']['name'] === 'add_row_to_sheets') {

                    $arguments = $toolCall['function']['arguments'];

                    // –ï—Å–ª–∏ arguments —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
                    if (is_string($arguments)) {
                        $arguments = json_decode($arguments, true);
                    }

                    Log::info('Executing tool handler', [
                        'function_name' => $toolCall['function']['name'],
                        'arguments' => $arguments,
                    ]);

                    $result = $this->toolHandler->handle($arguments);

                    Log::info('Tool call executed', [
                        'tool_name' => $toolCall['function']['name'],
                        'success' => $result['success'],
                        'result' => $result,
                    ]);

                    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI
                    $toolResults[] = [
                        'call_id' => $toolCall['id'] ?? uniqid(),
                        'type' => 'function_result',
                        'function_result' => [
                            'output' => json_encode($result),
                        ],
                    ];
                }
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if ($toolResults !== []) {
                $toolSummary = '';
                foreach ($toolResults as $toolResult) {
                    $output = json_decode($toolResult['function_result']['output'], true);
                    if ($output['success']) {
                        $toolSummary .= "\n\n‚úÖ ".$output['message'];
                    } else {
                        $toolSummary .= "\n\n‚ùå –û—à–∏–±–∫–∞: ".$output['error'];
                    }
                }

                return ($content ?: '–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.');
            }
        }

        return $content ?: '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.';
    }

    private function processWithToolCalls(ResponseRequestDto $requestDto, User $user, int $maxIterations = 5): string
    {
        $currentRequest = $requestDto;
        $iteration = 0;
        $lastResponse = null;

        while ($iteration < $maxIterations) {
            $iteration++;

            Log::info('Processing AI request iteration', [
                'iteration' => $iteration,
                'max_iterations' => $maxIterations,
                'user_id' => $user->id,
            ]);

            // –í –Ω–æ–≤–æ–º API /responses –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º
            // –£–±–∏—Ä–∞–µ–º previous_response_id –∏ conversation_id –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å tool outputs
            $cleanRequest = new ResponseRequestDto(
                model: $currentRequest->model,
                input: $currentRequest->input,
                instructions: $currentRequest->instructions,
                conversationId: null, // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º conversation –¥–ª—è tool calls
                previousResponseId: null, // –£–±–∏—Ä–∞–µ–º —Å–≤—è–∑—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º response
                maxOutputTokens: $currentRequest->maxOutputTokens,
                temperature: $currentRequest->temperature,
                tools: $currentRequest->tools,
                toolChoice: $currentRequest->toolChoice,
                metadata: $currentRequest->metadata,
                store: $currentRequest->store,
                stream: $currentRequest->stream,
            );

            $response = $this->openAIService->createResponse($cleanRequest, $user);
            $lastResponse = $response;

            if (! $response->hasFunctionCalls()) {
                // –ù–µ—Ç –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                Log::info('No function calls in response, returning final answer', [
                    'iteration' => $iteration,
                    'user_id' => $user->id,
                    'response_content' => $response->getContent(),
                ]);

                $content = $response->getContent() ?: '–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.';

                return $this->parseAIResponse($content);
            }

            // –ï—Å—Ç—å –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
            $functionCalls = $response->getFunctionCalls();
            Log::info('Function calls detected', [
                'iteration' => $iteration,
                'function_calls_count' => count($functionCalls),
                'function_calls' => $functionCalls,
            ]);

            $toolOutputs = $this->executeFunctionCalls($functionCalls);

            if ($toolOutputs === []) {
                // –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ —á—Ç–æ –µ—Å—Ç—å
                Log::warning('Function calls failed to execute', [
                    'iteration' => $iteration,
                    'user_id' => $user->id,
                ]);

                return $response->getContent() ?: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π.';
            }

            Log::info('Tool outputs processed successfully', [
                'iteration' => $iteration,
                'conversation_id' => $user->conversation_id,
                'response_id' => $response->id,
                'tool_outputs_count' => count($toolOutputs),
            ]);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã tool calls –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Sheets
            $hasSuccessfulSheetsTool = false;
            foreach ($functionCalls as $functionCall) {
                if ($functionCall['name'] === 'add_row_to_sheets') {
                    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π tool output
                    foreach ($toolOutputs as $toolOutput) {
                        if ($toolOutput['tool_call_id'] === ($functionCall['id'] ?? $functionCall['call_id'] ?? '')) {
                            $output = json_decode((string) $toolOutput['output'], true);
                            if ($output['success']) {
                                $hasSuccessfulSheetsTool = true;
                                break 2;
                            }
                        }
                    }
                }
            }

            // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–ø–∏—Å—å –≤ Google Sheets, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º conversation_id –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            if ($hasSuccessfulSheetsTool) {
                $user->update(['conversation_id' => null]);
                Log::info('Conversation ID reset after successful Google Sheets operation', [
                    'user_id' => $user->id,
                ]);

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
                return '–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞';
            }

            $content = $response->getContent() ?: '–ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.';

            return $this->parseAIResponse($content);
        }

        Log::warning('Reached maximum iterations without final response', [
            'max_iterations' => $maxIterations,
            'user_id' => $user->id,
            'last_response_content' => $lastResponse?->getContent(),
        ]);

        $content = $lastResponse?->getContent() ?: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π. –ó–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.';

        return $this->parseAIResponse($content);
    }

    private function executeFunctionCalls(array $functionCalls): array
    {
        $toolOutputs = [];

        foreach ($functionCalls as $toolCall) {
            $callId = $toolCall['id'] ?? $toolCall['call_id'] ?? uniqid();
            $functionName = $toolCall['name'] ?? 'unknown';

            Log::info('Executing function call', [
                'tool_call_structure' => $toolCall,
                'extracted_call_id' => $callId,
                'function_name' => $functionName,
            ]);

            if ($toolCall['type'] === 'function_call' &&
                $toolCall['name'] === 'add_row_to_sheets') {

                $arguments = $toolCall['arguments'];

                // –ï—Å–ª–∏ arguments —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
                if (is_string($arguments)) {
                    $arguments = json_decode($arguments, true);
                }

                Log::info('Executing tool handler with arguments', [
                    'call_id' => $callId,
                    'arguments' => $arguments,
                ]);

                $result = $this->toolHandler->handle($arguments);

                Log::info('Function call executed', [
                    'call_id' => $callId,
                    'success' => $result['success'],
                    'result' => $result,
                ]);

                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π tool output —Å–æ–≥–ª–∞—Å–Ω–æ OpenAI API
                $toolOutput = [
                    'tool_call_id' => $callId,
                    'output' => json_encode($result),
                ];

                Log::info('Tool output prepared', [
                    'tool_output' => $toolOutput,
                ]);

                $toolOutputs[] = $toolOutput;
            } else {
                Log::warning('Unsupported function call', [
                    'tool_call' => $toolCall,
                ]);
            }
        }

        Log::info('All function calls executed', [
            'total_outputs' => count($toolOutputs),
            'tool_outputs' => $toolOutputs,
        ]);

        return $toolOutputs;
    }

    private function parseAIResponse(string $response): string
    {
        // –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        $cleanResponse = preg_replace('/^```json\s*|\s*```$/m', '', trim($response));

        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
        $decoded = json_decode(trim($cleanResponse), true);

        if (json_last_error() === JSON_ERROR_NONE && isset($decoded['content'])) {
            Log::info('AI response parsed as JSON', [
                'has_need_confirm' => isset($decoded['need_confirm']),
                'need_confirm' => $decoded['need_confirm'] ?? false,
                'content_length' => strlen((string) $decoded['content']),
            ]);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç, –∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ need_confirm –ø–µ—Ä–µ–¥–∞–µ–º —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if (isset($decoded['need_confirm']) && $decoded['need_confirm'] === true) {
                return $decoded['content']."\n<!-- NEED_CONFIRM -->";
            }

            return $decoded['content'];
        }

        Log::info('AI response is not JSON, returning as-is', [
            'response_length' => strlen($response),
            'json_error' => json_last_error_msg(),
        ]);

        // –ï—Å–ª–∏ –Ω–µ JSON –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—è content, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return $response;
    }
}
